import { DateTime } from "luxon";
import { City } from "@/data/cities";

export interface CalendarEvent {
  title: string;
  startTime: DateTime;
  endTime: DateTime;
  timezone: string;
  description?: string;
  location?: string;
}

export const generateICSFile = (event: CalendarEvent): string => {
  const formatDateTime = (dt: DateTime) =>
    dt.toUTC().toFormat("yyyyMMdd'T'HHmmss'Z'");

  const icsContent = [
    "BEGIN:VCALENDAR",
    "VERSION:2.0",
    "PRODID:-//TimeSync//TimeSync App//EN",
    "BEGIN:VEVENT",
    `UID:${Date.now()}@timesync.app`,
    `DTSTART:${formatDateTime(event.startTime)}`,
    `DTEND:${formatDateTime(event.endTime)}`,
    `SUMMARY:${event.title}`,
    `DESCRIPTION:${event.description || ""}`,
    `LOCATION:${event.location || ""}`,
    "STATUS:CONFIRMED",
    "SEQUENCE:0",
    "END:VEVENT",
    "END:VCALENDAR",
  ].join("\r\n");

  return icsContent;
};

export const downloadICSFile = (event: CalendarEvent) => {
  const icsContent = generateICSFile(event);
  const blob = new Blob([icsContent], { type: "text/calendar;charset=utf-8" });
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = `${event.title
    .replace(/[^a-z0-9]/gi, "_")
    .toLowerCase()}.ics`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const generateGoogleCalendarUrl = (event: CalendarEvent): string => {
  const formatGoogleDateTime = (dt: DateTime) =>
    dt.toUTC().toFormat("yyyyMMdd'T'HHmmss'Z'");

  const params = new URLSearchParams({
    action: "TEMPLATE",
    text: event.title,
    dates: `${formatGoogleDateTime(event.startTime)}/${formatGoogleDateTime(
      event.endTime
    )}`,
    details: event.description || "",
    location: event.location || "",
    ctz: event.timezone,
  });

  return `https://calendar.google.com/calendar/render?${params.toString()}`;
};

export const generateOutlookUrl = (event: CalendarEvent): string => {
  const params = new URLSearchParams({
    path: "/calendar/action/compose",
    rru: "addevent",
    subject: event.title,
    startdt: event.startTime.toISO() || "",
    enddt: event.endTime.toISO() || "",
    body: event.description || "",
    location: event.location || "",
  });

  return `https://outlook.live.com/calendar/0/deeplink/compose?${params.toString()}`;
};

export const createMeetingEvent = (
  title: string,
  sourceCity: City,
  targetCities: City[],
  meetingTime: DateTime,
  duration: number = 60
): CalendarEvent => {
  const endTime = meetingTime.plus({ minutes: duration });
  const cities = [sourceCity, ...targetCities];
  const timezoneInfo = cities
    .map(
      (city) =>
        `${city.name}: ${meetingTime.setZone(city.timezone).toFormat("h:mm a")}`
    )
    .join("\n");

  return {
    title,
    startTime: meetingTime,
    endTime,
    timezone: sourceCity.timezone,
    description: `Global meeting across time zones:\n\n${timezoneInfo}\n\nGenerated by TimeSync`,
    location: "Video Conference",
  };
};

export const exportToCalendar = async (
  event: CalendarEvent,
  type: 'google' | 'outlook' | 'ics'
) => {
  switch (type) {
    case 'google':
      window.open(generateGoogleCalendarUrl(event), '_blank');
      break;
    case 'outlook':
      window.open(generateOutlookUrl(event), '_blank');
      break;
    case 'ics':
      downloadICSFile(event);
      break;
    default:
      throw new Error(`Unsupported calendar type: ${type}`);
  }
};
